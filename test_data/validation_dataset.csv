Questions,Ground truths
How to deploy a webapp?,"To deploy a web application in Choreo, follow the steps below:\n\n1. **Create a project**:  On the organization home page, click **+ Create Project**. Enter a display name, unique name, and description for the project. Click **Create**. This creates the project and opens the project home page. \n\n2. **Create a Web Application component**: On the project home page, click **Web Application** under **Create a Single Component**. Enter a unique name and a description for the web application. \n\n3. **Connect to GitHub**: Go to the **GitHub** tab and click **Authorize with GitHub**. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository. You can also paste the repository URL in the **Provide Repository URL** field to connect to it without requiring authorization. \n\n4. **Enter the required information**: Enter the required information such as your GitHub account in the **Organization** field, repository name in the **Repository** field, and the branch name in the **Branch** field. \n\n5. **Select Buildpack**: Select **NodeJS** as the **Buildpack** and provide the necessary details such as **NodeJS Project Directory**, **Language Version**, and **Port**. \n\n6. **Create the component**: Click **Create**. Choreo initializes the component with the sample implementation and opens the **Overview** page of the component.\n\n7. **Deploy the web application**: In the left navigation menu, click **Deploy**. In the **Set Up** card, click **Configure and Deploy**. Click **Next** to move to the **Authentication Settings** pane. Keep the default settings and click **Deploy**. \n\n8. **Verify the deployment**: To verify that you have successfully hosted the web application, click the **Web App URL** in the **Development** card. This takes you to the web application.\n\nFor more information, you can refer to the official Choreo documentation [here](https://wso2.com/choreo/docs/quick-start-guides/deploy-your-first-static-web-application/#step-2-create-a-web-application-component) and [here](https://wso2.com/choreo/docs/quick-start-guides/deploy-your-first-static-web-application/#step-4-deploy-and-access-your-web-application)."
How to connect my frontend app and backend service?,"To connect your frontend app and backend service in Choreo, you need to follow these steps:\n\n1. **Create a web application to consume the service:** \n - In the Choreo Console, open the project home page.\n - Click **+ Create** under **Component Listing** and select the **Web Application** card.\n - Specify the component's name and description, then navigate to the **GitHub** tab. \n - Click **Authorize with GitHub** to allow Choreo to connect to your GitHub account. \n - Enter your GitHub credentials and select the repository containing your front-end application.\n - Specify the organization, repository, branch, project directory, build command, build path, and Node version.\n - Click **Create** to initialize the component with the implementation from your GitHub repository.\n\n2. **Create a connection between the web application and the deployed service:**\n - In the left navigation menu, click **Dependencies** and then click **Connections**.\n - Click **+ Create** and in the **Create Connection** pane, select your backend service.\n - Specify the name and description for the connection and click **Next**.\n - Copy the Service URL displayed here to use when you configure the web application before deploying it. \n\n3. **Build the web application component:**\n - In the left navigation menu, click **Build**.\n - In the **Builds** pane, click **Build**. \n - Select the latest commit and click **Build** again to trigger the build process.\n\n4. **Configure and deploy the web application:**\n - In the left navigation menu, click **Deploy**.\n - In the **Set Up** card, click **Configure and Deploy**. \n - Replace `<Service URL>` with the value that you copied when creating a connection to the backend service in the `config.js` file mount.\n - Enable \""Managed authentication with Choreo\"" under **Authentication Settings**.\n - Create a user to access the web application under **Manage Users**.\n - Click **Deploy** in the **Authentication** pane. \n - Once deployment is complete, copy the **Web App URL** from the development environment card.\n\nYou can find detailed steps in the [Choreo documentation](https://wso2.com/choreo/docs/quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-6-consume-the-service)."""
"I'm getting "".choreo/endpoints.yaml not found"" error. How do I resolve this?","The error message you're seeing, '.choreo/endpoints.yaml not found', indicates that the `endpoints.yaml` file is missing from your project's root directory in the `.choreo` folder. This file is required to define the endpoints for your service component. \n\nTo resolve this error, you need to create an `endpoints.yaml` file in the `.choreo` directory at the build context path and commit it to the source repository. The `endpoints.yaml` file should contain details about the endpoints that your service component will expose. Here is a sample `endpoints.yaml` file:\n\n```yaml\nversion: 0.1\nendpoints:\n- name: Your Service\n port: 9090\n type: REST\n networkVisibility: Project\n context: /your_service\n schemaFilePath: your_service_openapi.yaml\n```\n\nIn this file:\n\n- `name` is a unique name for the endpoint, which Choreo will use to generate the managed API.\n- `port` is the numeric port value that gets exposed via this endpoint.\n- `type` is the type of traffic this endpoint is accepting, such as `REST`, `GraphQL`, `gRPC`, `UDP`or `TCP`.\n- `networkVisibility` is the network level visibility of this endpoint, which defaults to `Public` if not specified. Accepted values are `Project`, `Organization`, or `Public`.\n- `context` is the context (base path) of the API that Choreo exposes via this endpoint. \n- `schemaFilePath` is the swagger definition file path. This field should be a relative path to the project path.\n\nPlease make sure to replace 'Your Service' and '/your_service' with the actual name and context of your service, and 'your_service_openapi.yaml' with the actual OpenAPI schema file.\n\nFor more detailed information about the `endpoints.yaml` file and its structure, you can refer to the following documentation: [Configure endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#configure-endpoints)"""
"I'm getting ""procfile not found"" error for my python service. How do I resolve this?","The error you're encountering is because Choreo requires a `Procfile` in your Python project's root directory. A `Procfile` is a configuration file used to declare the commands that are run by your application's containers. \n\nFor a Python project, your `Procfile` might look something like this:\n```\nweb: <command to start your application>\n``` \nFor example, if you're using Flask, your `Procfile` should look like this:\n```\nweb: flask run --host=0.0.0.0\n```\n\nPlease ensure that you have a `Procfile` in your project root directory and that it contains the appropriate command to start your application. You can refer more on this from the [Choreo documentation](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/#develop-a-component)."
Generate a sample endpoints.yaml file for my docker service.,"To generate a sample `endpoints.yaml` file for your Docker service, you will need to follow certain steps. Here is a sample file content for `endpoints.yaml`:\n\n```yaml\n# +required Version of the endpoint configuration YAML\nversion: 0.1\n\n# +required List of endpoints to create\nendpoints:\n# +required Unique name for the endpoint. (This name will be used when generating the managed API)\n- name: Your Service\n# +required Numeric port value that gets exposed via this endpoint\nport: 9090\n# +required Type of the traffic this endpoint is accepting. Example: REST, GraphQL, etc.\n# Allowed values: REST, GraphQL, GRPC, UDP, TCP\ntype: REST\n# +optional Network level visibility of this endpoint. Defaults to Public\n# Accepted values: Project|Organization|Public.\nnetworkVisibility: Project\n# +optional Context (base path) of the API that is exposed via this endpoint.\n# This is mandatory if the endpoint type is set to REST or GraphQL.\ncontext: /your-service\n# +optional Path to the schema definition file. Defaults to wild card route if not provided\n# This is only applicable to REST endpoint types.\n# The path should be relative to the docker context.\nschemaFilePath: your_openapi.yaml\n```\n\nYou should replace the placeholders with your specific information. For example, replace `Your Service` with your service's unique name, `9090` with your service's port number, `REST` with your service type (if it isn't REST), and `your_openapi.yaml` with the relative path to your schema definition file.\n\nThis `endpoints.yaml` file should be located in the `.choreo` directory at the root of the Docker build context path. For example, if your Docker build context path is `my/docker/path`, the `endpoints.yaml` file should be located at `my/docker/path/.choreo/endpoints.yaml`.\n\nFor more information on the `endpoints.yaml` file, you can refer to the [Choreo documentation](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#configure-endpoints)."
Tell me how I can configure a readiness probe?,"To configure a readiness probe in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to configure readiness probes.\n2. In the left navigation menu, click **DevOps** and then click **Health Checks**.\n3. On the **Health Checks** page, click **+ Create**.\n4. Configure the readiness probe depending on your requirement.\n5. Click **Save**. \n\nYou can update or remove a probe at any time. After setting up the probe, you can ensure that the container works as expected by clicking **Runtime** under **DevOps** in the left navigation menu. On the **Runtime** page, check the details to confirm that the container works as expected. If the container does not start, check the **events and conditions** to see if any of the probes are causing the container to fail.\n\nReadiness probes run periodically throughout the lifecycle of a container. Unlike liveness probes, these probes do not restart the container if the probe fails. Instead, they stop the container from receiving network traffic. Be mindful when you configure readiness probes on a single-running replica. If the readiness probe fails, your application stops receiving traffic because there is only one active replica. The application may not recover unless the liveness probe fails and restarts the container.\n\nYou can configure the following probe types for readiness probes:\n\n- HTTP `GET` request: This probe sends an HTTP `GET` request to a specified port and path on the container. A response status code in the range of 200-399 indicates that the request is a success. Depending on your requirement, you can configure additional HTTP headers. The recommended approach is to create a `/healthz` or `/health` endpoint in your service for this purpose.\n- TCP connection probe: This probe attempts to open a socket to the container on the specified port. If it cannot establish a TCP connection, it becomes a failure.\n- Execute a command: This probe executes a given script inside the container. A non-zero return from the command is considered a failure. For example, `[\""cat\"", \""/tmp/healthy\""]` is considered healthy if the file `/tmp/healthy` is present. If not, it becomes a failure (non-zero exit code). In such scenarios, the application is responsible for writing and maintaining this file in the specified location.\n\nFor more details, please refer to the [Set Up Health Checks](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes) documentation."
How do I connect the service when I don't have authentication for my app?,"If you don't have authentication for your application, you can still connect to a service by following the steps below:\n\n1. **Add the connection configuration:** For single-page applications, add the connection configuration as a file mount. Mount a file via the **Configurations** pane on the **Deploy** page. Mount a file (for example, `config.js`) and add the following configuration into it:\n\n```yaml\nwindow.configs = {\napiUrl: '<SERVICE_URL>',\nconsumerKey: '<CONSUMER_KEY>',\nconsumerSecret: '<CONSUMER_SECRET>',\ntokenUrl: '<TOKEN_URL>',\n};\n```\n\n2. **Read the configuration:** After adding the connection configuration, you can read the configuration from your application. For example, in NodeJS:\n\n```java\nconst serviceURL = window?.configs?.apiUrl ? window.configs.apiUrl : \""/\"";\n```\n\n3. **Acquire an OAuth 2.0 access token:** For languages without OAuth 2.0-aware HTTP clients, manually initiate a call to the token endpoint. This includes fetching the token and managing token expiration and refresh directly within your application code. Here is a sample curl command to obtain a token:\n\n```bash\nCONSUMER_KEY=\""your_consumer_key\""\nCONSUMER_SECRET=\""your_consumer_secret\""\nTOKEN_URL=\""your_token_url\""\n\n# Encode client credentials as Base64\nCLIENT_CREDENTIALS=$(echo -n \""$CLIENT_ID:$CLIENT_SECRET\"" | base64)\n\ncurl -X POST $TOKEN_URL \\\n-H \""Content-Type: application/x-www-form-urlencoded\"" \\\n-H \""Authorization: Basic $CLIENT_CREDENTIALS\"" \\\n--data-urlencode \""grant_type=client_credentials\""\n```\n\n4. **Invoke the service:** You can use the token obtained in the previous step to make calls to the dependent service. Subsequently, add the obtained token to the HTTP authorization header with the bearer prefix. Here is a sample code snippet in NodeJS:\n\n```java\nconst response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n}\n})\n```\n\nYou can find more detailed information in the Choreo documentation [here](https://wso2.com/choreo/docs/develop-components/sharing-and-reusing/use-a-connection-in-your-web-application/)."
How to configure Azure as an external IdP?,"To configure Azure Active Directory (Azure AD) as an external Identity Provider (IdP) in Choreo, you need to follow a sequence of steps. Before you begin, ensure that you have the following prerequisites:\n\n1. An Azure Active Directory account. You can set up an Azure Active Directory account at [Azure's website](https://azure.microsoft.com/en-gb/) if you don't already have one.\n2. Administrator rights to your Choreo organization. This is required to configure the Azure AD account in your organization.\n\nHere are the steps to add Azure AD as an IdP in Choreo:\n\n1. Sign in to the Choreo Console at [Choreo Console](https://console.choreo.dev/).\n2. In the left navigation menu, click **Settings**.\n3. In the header, click the **Organization** list. This will open the organization level settings page.\n4. On the **Application Security** tab, click **Identity Providers** and then click **+ Identity Provider**.\n5. Select **Microsoft Entra ID (Azure AD)** as the Identity Provider.\n6. Provide a name and a description for the IdP.\n7. To obtain the `Well-Known URL` of your Azure AD instance, on your Azure account, under **Azure Active Directory** go to **App registrations**, and then **Endpoints**. Copy the URI under`OpenID Connect metadata document`.\n8. Leave the **Apply to all environments** checkbox selected. However, if you want to restrict the use of the external IdP to a certain environment, you can select them from the **Environments** list.\n9. Review the endpoints and click **Next**.\n\nPlease note that in Azure, there are two versions of access tokens available. By default, the IDP applications you create use the v1 access token. Therefore, if you intend to use the v1 access token, when providing the `Well-Known URL`, omit the v2.0 path segment from the URL. If you intend to work with v2.0, then the IDP application's manifest should be changed as explained in the access token documentation.\n\nFor more detailed steps, you can refer to the [official documentation](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#add-azure-active-directory-as-an-external-idp-in-choreo)."
How to test an API with the API chat?,"To test an API with the API Chat in Choreo, follow these steps:\n\n1. In the Choreo Console, find the component you want to test in the **Component Listing** pane and click on it.\n2. In the left navigation, click on **Test** and then click on **API Chat**. This will open up the **API Chat** pane.\n3. In the **API Chat** pane, you can enter your query in natural language and execute it. For example, if your service has a resource like \""/pet/findByStatus,\"" you can input the query, such as \""Get the pets that are available,\"" and execute it to obtain results. The resources are executed sequentially based on your query. Alternatively, you can use the sample queries available to try out API Chat.\n\nBefore testing your API with API Chat, make sure you have a REST API Proxy component or a Service component that exposes a REST API with a valid OpenAPI specification. The API Chat feature is available for these components.\n\nYou can find more details in the [Choreo API Chat documentation](https://wso2.com/choreo/docs/s-with-choreo-apichat/#test-your-apis)."
How does passing End-User Attributes to Upstream services work?,"Passing end-user attributes to upstream services in Choreo involves the use of a JSON Web Token (JWT) that carries user information to a backend service. This is done via an HTTP header in an API request.\n\nHere's a brief overview of how it works:\n\n- JWT contains claims transferred between the parties, for example, the user and the backend. These claims can be metadata of the request or data about the user. This set of claims is called a dialect.\n- For each API request, a digitally signed JWT is carried to the backend service in the format `{token header}.{claims list}.{signature}`.\n- When a request goes through Choreo, the backend JWT is appended as the `X-JWT-Assertion` header in the outgoing message. The backend service fetches the JWT and retrieves the required information about the user, application, or token.\n\nTo enable passing end-user attributes to the backend through API calls via Choreo, you need to:\n\n1. Select the component for which you want to pass end-user attributes to the backend in the **Components Listing** pane.\n2. Click on **Deploy** in the left navigation menu.\n3. Go to the **Set Up** card and click **Endpoint Configurations**. This opens the **Endpoint Configurations** pane.\n4. Select the **Pass Security Context To Backend** checkbox.\n5. Optionally, specify an appropriate audience claim value for the backend service.\n6. Click **Apply**.\n7. To redeploy the component with the applied setting, go to the **Set Up** card and click **Deploy**.\n\nClaims in the JWT can be validated using the public key corresponding to the private key used to sign the JWT. Choreo provides an endpoint to specify the public keys for backend JWT validation, and this endpoint provides one or more signing keys to validate the JWT. The JSON web keys have a `kid` identifier that can be matched with the same property on the JWT to decide which key to use when validating.\n\nFor more detailed information, you can refer to the following documentation: [Pass End-User Attributes to Upstream Services](https://wso2.com/choreo/docs/nd-authorization/pass-end-user-attributes-to-upstream-services/#how-it-works)."